name: "MySQL Container Action"
description: "Starts and stops a MySQL container"
inputs:
  MYSQL_VERSION:
    description: "MySQL version to use"
    required: false
    default: "latest"
  MYSQL_DATABASE:
    description: "Database name"
    required: false
    default: "My_CI_DB"
  MYSQL_ROOT_PASSWORD:
    description: "Database password"
    required: false
    default: "password"
  DB_PORT:
    description: "Port to expose the MySQL server on"
    required: false
    default: 3306
outputs:
  ERROR_MESSAGE:
    description: "Error message in case of an error"

runs:
  using: "composite"
  steps:
    - name: Check Docker installation
      id: check_docker
      run: |
        if ! command -v docker &> /dev/null
        then
          echo "Docker could not be found"
          echo "::set-output name=ERROR_MESSAGE::Docker is not installed on this runner"
          exit 1
        fi
      shell: bash

    - name: Start MySQL Container
      id: start_container
      run: |
        CONTAINER_ID=$(docker run --rm -e MYSQL_ROOT_PASSWORD=${{ inputs.MYSQL_ROOT_PASSWORD }} --name=${{ inputs.MYSQL_DATABASE }} -e MYSQL_DATABASE=${{ inputs.MYSQL_DATABASE }} -p ${{ inputs.DB_PORT }}:3306 -d mysql:${{ inputs.MYSQL_VERSION }})
        if [[ -z "$CONTAINER_ID" ]]; then
          echo "::set-output name=ERROR_MESSAGE::Failed to start MySQL container"
          exit 1
        fi
        echo "MySQL container started with ID $CONTAINER_ID"
      shell: bash
      env:
        DB_PORT: ${{ inputs.DB_PORT }}

    - name: Cleanup
      uses: webiny/action-post-run@3.1.0
      id: post-run-command
      if: ${{ !steps.start_container.outputs.ERROR_MESSAGE }}
      with:
        run: |
          docker stop ${{ inputs.DB_NAME }}
          echo "MySQL container stopped and removed"
